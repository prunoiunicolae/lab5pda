# lab5pda

#include<iostream>
#include"mpi.h"
#include <ctime>
#include <cstdlib>
#include <chrono>

#define MASTER 0
#define m 10

int main(int argc, char *argv[]){
	MPI_Init(&argc,&argv);
  
	int var = 0;
	int numprocs, procid, len;
	int message;
	int max_final, proc_leader;

	MPI_Status status;

	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &procid);
	//MPI_Get_processor_name(hostname, &len);

	if(procid < m){
		if(procid == MASTER){
			srand( time(0));
        		max = rand()%100;
			int max_proc=0;
			for(int j=1;j<m;j++){	
				proc_curent = procid; // sau j
				MPI_Recv(&message, 1, MPI_INT, j, 1, MPI_COMM_WORLD, &status);

				if(message >= max && max_proc < proc_curent){
				max=message;
				max_proc = proc_curent;
				}
			}	
		}
		else
		{
			srand( time(0));
        		message = rand()%100;
			MPI_Send(&message, 1, MPI_INT, MASTER, 1, MPI_COMM_WORLD); // trebe sa fie 0? adica master?
		}
    
		if(procid == MASTER){	
			max_final = max;
			proc_leader = max_proc;
			for(int j=1;j<m;j++)
      
				MPI_Send(&max_final, 1, MPI_INT, j, 1, MPI_COMM_WORLD); // j este procid
				MPI_Send(&proc_leader, 1, MPI_INT, j, 1, MPI_COMM_WORLD); // j este procid
	}

		else{
			MPI_Recv(&max_final, 1, MPI_INT, MASTER, 1, MPI_COMM_WORLD, &status);
			MPI_Recv(&proc_leader, 1, MPI_INT, MASTER, 1, MPI_COMM_WORLD, &status);
		}
	}
	MPI_Finalize();

	return 0;
}
